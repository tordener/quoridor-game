{"version":3,"file":"game.test.js","sourceRoot":"","sources":["game.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Game } from \"../src/quoridor\";\r\n\r\ndescribe(\"Game movement\", () => {\r\n    /*\r\n\t\tUnit tests for movements and move validations\r\n\t*/\r\n    let game: Game;\r\n\r\n    beforeEach(() => {\r\n        game = new Game();\r\n    });\r\n\r\n    test(\"Should allow pawn to move forward when no obstacles are present\", () => {\r\n        const origin = [0, 8];\r\n        const destination = [2, 8];\r\n        const result = game.movePawn(destination);\r\n        expect(result.success).toBe(true);\r\n        expect(game.board[origin[0]][origin[1]].occupiedBy).toBe(null);\r\n        expect(game.board[destination[0]][destination[1]].occupiedBy).toBe(\r\n            \"white\"\r\n        );\r\n        expect(game.whitePos).toEqual(destination);\r\n        expect(game.turn).toBe(\"black\");\r\n    });\r\n\r\n    test(\"Should not allow pawn to move when obstacle is present\", () => {\r\n        game.board[1][8].occupiedBy = \"wall\"; // wall above white\r\n        game.board[0][7].occupiedBy = \"wall\"; // wall to the left of white\r\n        game.board[0][9].occupiedBy = \"wall\"; // wall to the right of white\r\n        const origin = [0, 8];\r\n        const destination = [2, 8];\r\n        const result = game.movePawn(destination); // check forward\r\n        expect(result.success).toBe(false);\r\n        expect(game.board[origin[0]][origin[1]].occupiedBy).toBe(\"white\");\r\n        expect(game.board[destination[0]][destination[1]].occupiedBy).toBe(\r\n            null\r\n        );\r\n        expect(game.whitePos).toEqual(origin);\r\n        expect(game.turn).toBe(\"white\");\r\n\r\n        const resultMoveLeft = game.movePawn([0, 6]); // check left\r\n        expect(resultMoveLeft.success).toBe(false);\r\n        expect(game.whitePos).toEqual([0, 8]);\r\n        expect(game.turn).toBe(\"white\");\r\n        const resultMoveRight = game.movePawn([0, 10]); // check right\r\n        expect(resultMoveRight.success).toBe(false);\r\n        expect(game.whitePos).toEqual([0, 8]);\r\n        expect(game.turn).toBe(\"white\");\r\n        game.turn = \"black\";\r\n        game.board[15][8].occupiedBy = \"wall\";\r\n        const resultMoveBlackDown = game.movePawn([14, 8]); // verify down is functioning\r\n        expect(resultMoveBlackDown.success).toBe(false);\r\n        expect(game.blackPos).toEqual([16, 8]);\r\n        expect(game.turn).toBe(\"black\");\r\n    });\r\n\r\n    test(\"Should allow wall placement when no obstacles are present, and player has walls remaining\", () => {\r\n        const destinationSlotVertical: [number, number] = [0, 3];\r\n        const destinationSlotHorizontal: [number, number] = [1, 0];\r\n        const resultVertical = game.placeWall(...destinationSlotVertical);\r\n        const resultHorizontal = game.placeWall(...destinationSlotHorizontal);\r\n        expect(resultVertical.success).toBe(true);\r\n        expect(resultHorizontal.success).toBe(true);\r\n        expect(\r\n            game.board[destinationSlotVertical[0]][destinationSlotVertical[1]]\r\n                .occupiedBy\r\n        ).toBe(\"wall\");\r\n        expect(\r\n            game.board[destinationSlotHorizontal[0]][\r\n                destinationSlotHorizontal[1]\r\n            ].occupiedBy\r\n        ).toBe(\"wall\");\r\n        expect(game.whiteWalls).toBe(9);\r\n        expect(game.blackWalls).toBe(9);\r\n        expect(game.turn).toBe(\"white\");\r\n    });\r\n\r\n    test(\"Should not allow wall placement if player has no walls remaining\", () => {\r\n        const wallLocation: [number, number] = [0, 3];\r\n        game.whiteWalls = 0;\r\n        const result = game.placeWall(...wallLocation);\r\n        expect(result.success).toBe(false);\r\n        expect(game.whiteWalls).toBe(0);\r\n        expect(game.turn).toBe(\"white\");\r\n    });\r\n\r\n    test(\"Should not allow placement of walls in pawn cells\", () => {\r\n        const pawnCellLocation: [number, number] = [0, 0];\r\n        const result = game.placeWall(...pawnCellLocation);\r\n        expect(result.success).toBe(false);\r\n        expect(game.turn).toBe(\"white\");\r\n        expect(game.whiteWalls).toBe(10);\r\n    });\r\n\r\n    test(\"Should not allow placement of walls outside the boundary of the board\", () => {\r\n        const tooFarTop: [number, number] = [16, 0];\r\n        const tooFarBottom: [number, number] = [0, 0];\r\n        const tooFarLeft: [number, number] = [0, 0];\r\n        const tooFarRight: [number, number]= [0, 16];\r\n        const resultTop = game.placeWall(...tooFarTop);\r\n        expect(game.turn).toBe(\"white\");\r\n        const resultBottom = game.placeWall(...tooFarBottom);\r\n        expect(game.turn).toBe(\"white\");\r\n        const resultLeft = game.placeWall(...tooFarLeft);\r\n        expect(game.turn).toBe(\"white\");\r\n        const resultRight = game.placeWall(...tooFarRight);\r\n        expect(game.turn).toBe(\"white\");\r\n        expect(resultTop.success).toBe(false);\r\n        expect(resultBottom.success).toBe(false);\r\n        expect(resultLeft.success).toBe(false);\r\n        expect(resultRight.success).toBe(false);\r\n        expect(game.whiteWalls).toBe(10);\r\n        expect(game.blackWalls).toBe(10);\r\n    });\r\n\r\n    test(\"Should not allow placement of walls when obstacles are present\", () => {\r\n        game.placeWall(0, 1); // w = 9\r\n        const result = game.placeWall(0, 1); // b = 10\r\n        expect(result.success).toBe(false);\r\n        expect(game.turn).toBe(\"black\");\r\n        expect(game.whiteWalls).toBe(9);\r\n\r\n\t\tgame.placeWall(8,7); //vertical wall in the middle (w = 8)\r\n\t\texpect(game.placeWall(9,6).success).toBe(false); //intersecting wall\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.blackWalls).toBe(9);\r\n\t\texpect(game.whiteWalls).toBe(9);\r\n    });\r\n\r\n\ttest(\"Should decrease player's wall count by one after successful wall placement\", () => {\r\n\t\texpect(game.whiteWalls).toBe(10);\r\n\t\texpect(game.blackWalls).toBe(10);\r\n\t\tconst resultWhitePlacedWallOne = game.placeWall(0,7);\r\n\t\texpect(resultWhitePlacedWallOne.success).toBe(true);\r\n\t\texpect(game.whiteWalls).toBe(9);\r\n\t\texpect(game.turn).toBe('black');\r\n\t\tconst resultBlackPlacedWallOne = game.placeWall(4,11); // potential error\r\n\t\texpect(resultBlackPlacedWallOne.success).toBe(true);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.blackWalls).toBe(9);\r\n\t\t\r\n\t});\r\n\r\n    test(\"Should jump over unblocked pawns if enough space is available (vertical)\", () => {\r\n        game.whitePos = [6, 8];\r\n        game.blackPos = [8, 8];\r\n        game.board[6][8].occupiedBy = \"white\";\r\n        game.board[0][8].occupiedBy = null;\r\n        game.board[8][8].occupiedBy = \"black\";\r\n        game.board[16][8].occupiedBy = null;\r\n\r\n        const result = game.movePawn([8, 8]);\r\n        expect(result.success).toBe(true);\r\n        expect(game.whitePos).toEqual([10, 8]);\r\n        expect(game.turn).toBe(\"black\");\r\n        const moveBlackUpResult = game.movePawn([10, 8]);\r\n        expect(moveBlackUpResult.success).toBe(true);\r\n        expect(game.turn).toBe(\"white\");\r\n        expect(game.blackPos).toEqual([12, 8]);\r\n    });\r\n\r\n    test(\"Should jump over unblocked pawns if enough space is available (horizontal)\", () => {\r\n        game.whitePos = [8, 6];\r\n        game.blackPos = [8, 8];\r\n        game.board[8][4].occupiedBy = \"white\";\r\n        game.board[0][8].occupiedBy = null;\r\n        game.board[8][8].occupiedBy = \"black\";\r\n        game.board[16][8].occupiedBy = null;\r\n\r\n        const result = game.movePawn([8, 8]);\r\n        expect(result.success).toBe(true);\r\n        expect(game.whitePos).toEqual([8, 10]);\r\n        expect(game.turn).toBe(\"black\");\r\n        const moveBlackUpResult = game.movePawn([8, 10]);\r\n        expect(moveBlackUpResult.success).toBe(true);\r\n        expect(game.turn).toBe(\"white\");\r\n        expect(game.blackPos).toEqual([8, 12]);\r\n    });\r\n\r\n    test(\"Should not allow jumping over a pawn at the edge of the board\", () => {\r\n        // Check right edge of board\r\n        game.whitePos = [8, 14];\r\n        game.blackPos = [8, 16];\r\n        game.board[8][14].occupiedBy = \"white\";\r\n        game.board[8][16].occupiedBy = \"black\";\r\n\r\n        const checkJumpRight = game.movePawn([8, 16]);\r\n        expect(checkJumpRight.success).toBe(false);\r\n        expect(game.turn).toBe(\"white\");\r\n        expect(game.whitePos).toEqual([8, 14]);\r\n\r\n        // Check right edge of board\r\n        game.whitePos = [8, 2];\r\n        game.blackPos = [8, 0];\r\n        game.board[8][2].occupiedBy = \"white\";\r\n        game.board[8][0].occupiedBy = \"black\";\r\n        const checkJumpLeft = game.movePawn([8, 0]);\r\n        expect(checkJumpLeft.success).toBe(false);\r\n        expect(game.whitePos).toEqual([8, 2]);\r\n        expect(game.turn).toBe(\"white\");\r\n\r\n        /*\r\n         * CHECKING TOP AND BOTTOM EDGES NEED TO BE HANDLED SPECIALLY\r\n         * DUE TO WIN CONDITIONS WHICH HAVE NOT BEEN IMPLEMENTED YET\r\n         */\r\n    });\r\n\r\n    test(\"Should not allow jumping over a pawn that has a wall between them\", () => {\r\n        game.whitePos = [6, 8]; // relocating the white pawn to the middle\r\n        game.blackPos = [8, 8]; // relocating the black pawn to the middle\r\n        game.board[6][8].occupiedBy = \"white\"; //changing the occupancy status of the board\r\n        game.board[8][8].occupiedBy = \"black\"; //changing the occupancy status of the board\r\n        game.board[7][8].occupiedBy = \"wall\"; //changing the occupancy status of the board\r\n\r\n        const resultMoveWhitePawn = game.movePawn([8, 8]); // execute the jump\r\n        expect(resultMoveWhitePawn.success).toBe(false);\r\n        expect(game.turn).toBe(\"white\");\r\n        expect(game.whitePos).toEqual([6, 8]);\r\n    });\r\n\r\n    test(\"Should not allow jumping over a pawn and a wall on the far side of the opposing pawn\", () => {\r\n        game.whitePos = [6, 8]; //relocating the white pawn to the middle\r\n        game.blackPos = [8, 8]; //relocating the black pawn to the middle\r\n        game.board[6][8].occupiedBy = \"white\"; // changing occupancy status of the board\r\n        game.board[8][8].occupiedBy = \"black\"; // changing occupancy status of the board\r\n        game.board[9][8].occupiedBy = \"wall\"; // changing occupancy status of the board\r\n\r\n        const moveWhitePawnForward = game.movePawn([8, 8]); // execute the jump\r\n        expect(moveWhitePawnForward.success).toBe(false);\r\n        expect(game.whitePos).toEqual([6, 8]);\r\n        expect(game.turn).toBe(\"white\");\r\n    });\r\n\r\n\ttest(\"Should not allow pawn to move more than one space in a valid direction\", () => {\r\n\t\tconst resultMoveTwoSpacesForward = game.movePawn([4,8]);\r\n\t\texpect(resultMoveTwoSpacesForward.success).toBe(false);\r\n\t\texpect(game.whitePos).toEqual([0,8]);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\tconst resultMoveTwoSpacesLeft = game.movePawn([0,4]);\r\n\t\texpect(resultMoveTwoSpacesLeft.success).toBe(false);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.whitePos).toEqual([0,8]);\r\n\t\tconst resultMoveTwoSpacesRight = game.movePawn([0,12]);\r\n\t\texpect(resultMoveTwoSpacesRight.success).toBe(false);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.whitePos).toEqual([0,8]);\r\n\t\tgame.whitePos = [4,8];\r\n\t\tgame.board[0][8].occupiedBy = null;\r\n\t\tgame.board[4][8].occupiedBy = 'white';\r\n\t\tconst resultMoveTwoSpacesDown = game.movePawn([0,8]);\r\n\t\texpect(resultMoveTwoSpacesDown.success).toBe(false);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.whitePos).toEqual([4,8]);\r\n\t});\r\n\r\n\ttest(\"Should not allow a pawn to move diagonally\", () => {\r\n\t\tconst resultMovedDiagonallyUpRight = game.movePawn([2,10]);\r\n\t\texpect(resultMovedDiagonallyUpRight.success).toBe(false);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.whitePos).toEqual([0,8]);\r\n\t\tconst resultMovedDiagonallyUpLeft = game.movePawn([2,6]);\r\n\t\texpect(resultMovedDiagonallyUpLeft.success).toBe(false);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.whitePos).toEqual([0,8]);\r\n\t\tgame.whitePos = [2,8];\r\n\t\tgame.board[0][8].occupiedBy = null;\r\n\t\tgame.board[2][8].occupiedBy = 'white';\r\n\t\tconst resultMovedDiagonallyDownLeft = game.movePawn([0,6]);\r\n\t\texpect(resultMovedDiagonallyDownLeft.success).toBe(false);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.whitePos).toEqual([2,8]);\r\n\t\tconst resultMovedDiagonallyDownRight = game.movePawn([0,10]);\r\n\t\texpect(resultMovedDiagonallyDownRight.success).toBe(false);\r\n\t\texpect(game.turn).toBe('white');\r\n\t\texpect(game.whitePos).toEqual([2,8]);\r\n\r\n\t\t\r\n\t});\r\n\r\n    test(\"Should declare white as winner when reaching black's edge of the board\", () => {\r\n        game.whitePos = [14, 10];\r\n        game.board[0][8].occupiedBy = null;\r\n        game.board[14][10].occupiedBy = \"white\";\r\n\r\n        const resultWhiteReachesBlackSide = game.movePawn([16, 10]);\r\n        expect(resultWhiteReachesBlackSide.success).toBe(true);\r\n        expect(game.whiteWon).toBe(true);\r\n    });\r\n\r\n    test(\"Should declare black as winner when reaching whites's edge of the board\", () => {\r\n        game.blackPos = [2, 10];\r\n        game.board[16][8].occupiedBy = null;\r\n        game.board[2][10].occupiedBy = \"black\";\r\n        game.turn = \"black\";\r\n\r\n        const resultBlackReachesBlackSide = game.movePawn([0, 10]);\r\n        console.log(resultBlackReachesBlackSide);\r\n        expect(resultBlackReachesBlackSide.success).toBe(true);\r\n        expect(game.blackWon).toBe(true);\r\n    });\r\n\r\n\ttest(\"Should detect white has no valid path to black's side of the board\", () => {\r\n\t\t/*\r\n\t\t\t* Solid horizontal wall\r\n\t\t*/\r\n\r\n\t\tfunction straightWall(){\r\n\t\t\tfor(let a = 0; a < 17; a++){\r\n\t\t\t\tgame.board[1][a].occupiedBy = 'wall';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst resultCheckPath = game.pathFinder(game.whitePos);\r\n\t\texpect(resultCheckPath).toBe(false);\r\n\t});\r\n\t\ttest(\"Should detect black has no valid path to white's side of the board\", () => {\r\n\t\t/*\r\n\t\t\t* Solid horizontal wall\r\n\t\t*/\r\n\r\n\t\tfunction straightWall(){\r\n\t\t\tfor(let a = 0; a < 17; a++){\r\n\t\t\t\tgame.board[1][a].occupiedBy = 'wall';\r\n\t\t\t}\r\n\t\t}\r\n\t\tgame.turn = 'black';\r\n\t\tconst resultCheckPath = game.pathFinder(game.blackPos);\r\n\t\texpect(resultCheckPath).toBe(false);\r\n\t});\r\n\t\ttest(\"Should detect white has a valid path to black's side of the board\", () => {\r\n\t\t/*\r\n\t\t\t* Solid horizontal wall\r\n\t\t*/\r\n\r\n\t\tfunction straightWall(){\r\n\t\t\tfor(let a = 0; a < 15; a++){\r\n\t\t\t\tgame.board[1][a].occupiedBy = 'wall';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst resultCheckPath = game.pathFinder(game.whitePos);\r\n\t\texpect(resultCheckPath).toBe(false);\r\n\t});\r\n\t\ttest(\"Should detect black has a valid path to white's side of the board\", () => {\r\n\t\t/*\r\n\t\t\t* Solid horizontal wall\r\n\t\t*/\r\n\r\n\t\tfunction straightWall(){\r\n\t\t\tfor(let a = 0; a < 15; a++){\r\n\t\t\t\tgame.board[1][a].occupiedBy = 'wall';\r\n\t\t\t}\r\n\t\t}\r\n\t\tgame.turn = 'black';\r\n\t\tconst resultCheckPath = game.pathFinder(game.blackPos);\r\n\t\texpect(resultCheckPath).toBe(false);\r\n\t});\r\n});\r\n"]}