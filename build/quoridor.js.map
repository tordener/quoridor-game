{"version":3,"file":"quoridor.js","sourceRoot":"","sources":["../src/quoridor.ts"],"names":[],"mappings":"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","sourcesContent":["//import * as fs from 'fs';\r\n/**\r\n * Represents a game of Quoridor.\r\n */\r\ntype CalculateMoveHelperResult = {valid: boolean; location: number[]}; // used only in helpers\r\ntype CalculateMovePawnResult = {success: boolean; canJump: boolean | null; jumpDestination: number[] | undefined | null; message: string};\r\ntype MoveResult = {success: boolean; message: string};\r\ntype JumpResultFail = {success: boolean; canJump: boolean; destination: number[] | any; message: string };\r\ntype JumpResultSuccess = {success: boolean; canJump: boolean; destination: number[] | any};\r\ntype Snapshot = {turn: string, whitePos: number[], blackPos: number[], board: any[][]};\r\n\r\n\r\nexport class Game {\r\n    /**\r\n     * Initializes a new game instance.\r\n     */\r\n    turn: string;\r\n    whitePos: number[] | any;\r\n    blackPos: number[] | any; \r\n    whiteWalls: number;\r\n    blackWalls: number;\r\n    whiteWon: boolean;\r\n    blackWon: boolean;\r\n    board: any[][];\r\n    availableSquares: number[][];\r\n    constructor() {\r\n        this.turn = \"white\";\r\n        this.whitePos = [0, 8];\r\n        this.blackPos = [16, 8];\r\n        this.whiteWalls = 10;\r\n        this.blackWalls = 10;\r\n        this.whiteWon = false;\r\n        this.blackWon = false;\r\n        this.board = this.initializeBoard();\r\n        this.availableSquares = this.generateAvailableSquares(this.whitePos);\r\n    }\r\n\r\n    /**\r\n     * Initializes the 17x17 game board with spaces and wall slots.\r\n     * @returns {Array} The initialized board.\r\n     */\r\n    initializeBoard(): any[][] {\r\n        /*\r\n            even row even col = space\r\n            even row odd col = v-slot\r\n            odd row even col = h-slot\r\n            odd row odd col = null\r\n        */\r\n        let board:any[] = [];\r\n        for (let row = 0; row < 17; row++) {\r\n            let currentRow:any[] = [];\r\n            for (let col = 0; col < 17; col++) {\r\n                if (row % 2 === 0 && col % 2 === 0) {\r\n                    currentRow.push({ type: \"space\", occupiedBy: null });\r\n                }\r\n                if (row % 2 === 0 && col % 2 === 1) {\r\n                    currentRow.push({ type: \"v-slot\", occupiedBy: null });\r\n                }\r\n                if (row % 2 === 1 && col % 2 === 0) {\r\n                    currentRow.push({ type: \"h-slot\", occupiedBy: null });\r\n                }\r\n                if (row % 2 === 1 && col % 2 === 1) {\r\n                    currentRow.push({ type: null, occupiedBy: null });\r\n                }\r\n            }\r\n            board.push(currentRow);\r\n        }\r\n        board[this.whitePos[0]][this.whitePos[1]].occupiedBy = \"white\";\r\n        board[this.blackPos[0]][this.blackPos[1]].occupiedBy = \"black\";\r\n        return board;\r\n    }\r\n\r\n    /**\r\n     * Determines the orientation of a wall based on board coordinates.\r\n     * @param {number} row - The row index.\r\n     * @param {number} col - The column index.\r\n     * @returns {string|boolean} 'v' for vertical, 'h' for horizontal, false if invalid.\r\n     */\r\n    determineWallOrientation(row: number, col: number): string | boolean {\r\n        if (row % 2 === 0 && col % 2 === 1) return \"v\";\r\n        if (row % 2 === 1 && col % 2 === 0) return \"h\";\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Updates the turn and decreases the wall count for the current player.\r\n     */\r\n    manageTurnWalls(): void {\r\n        if (this.turn === \"white\") this.whiteWalls--;\r\n        if (this.turn === \"black\") this.blackWalls--;\r\n        this.turn = this.turn === \"white\" ? \"black\" : \"white\";\r\n    }\r\n\r\n    /**\r\n     * Updates whose turn it is\r\n     */\r\n    manageTurnMove(): void {\r\n        this.turn = this.turn === \"white\" ? \"black\" : \"white\";\r\n    }\r\n    /**\r\n     * Checks if a position is outside the bounds of the board.\r\n     * @param {number} row - The row index.\r\n     * @param {number} col - The column index.\r\n     * @returns {boolean} True if out of bounds, false otherwise.\r\n     */\r\n    isOutOfBounds(row: number, col: number): boolean {\r\n        return row < 0 || row > 16 || col < 0 || col > 16;\r\n    }\r\n\r\n    /**\r\n     * Checks if a board cell is empty.\r\n     * @param {number} row - The row index.\r\n     * @param {number} col - The column index.\r\n     * @returns {boolean} True if occupied, false if unoccupied\r\n     */\r\n    isOccupied(row: number, col: number): boolean {\r\n        if (this.board[row][col].occupiedBy == null) return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates if a move is within two spaces either horizontally or vertically.\r\n     * @param {number[]} currentPos - The current position as [row, col].\r\n     * @param {number[]} destPos - The destination position as [row, col].\r\n     * @returns {boolean} True if move is valid, false otherwise.\r\n     */\r\n    verifyRange(currentPos: number[], destPos: number[]): boolean {\r\n        const differenceRow = Math.abs(currentPos[0] - destPos[0]);\r\n        const differenceCol = Math.abs(currentPos[1] - destPos[1]);\r\n        return (\r\n            (differenceRow === 2 && differenceCol === 0) ||\r\n            (differenceRow === 0 && differenceCol === 2)\r\n        );\r\n    }\r\n    /**\r\n     * Looks at the edge rows and determines if a player has won the game\r\n     * by changing the corresponding this.whiteWon/this.blackWon boolean to true;\r\n     * This function should be rewritten soon\r\n     * @returns {object} {win: boolean, winner: string}\r\n     */\r\n    gameWon(): {win: boolean, winner: string | null } {\r\n\r\n        let won = { win: false, winner: null as string | null };\r\n        for(let a = 0; a < 17; a++){\r\n            if(this.board[0][a].occupiedBy === \"black\"){\r\n                this.blackWon = true;\r\n                won.win = true;\r\n                won.winner = \"black\";\r\n                return won;\r\n            }\r\n            if(this.board[16][a].occupiedBy === \"white\"){\r\n                this.whiteWon = true;\r\n                won.win = true;\r\n                won.winner = \"white\";\r\n                return won;\r\n            }\r\n        }\r\n        return won;\r\n    }\r\n    /**\r\n     * Stringifies the contents of the array.\r\n     * @param {number[]} pos array containing the coordinates of a position \r\n     * @returns \r\n     */\r\n    serialize(pos: number[]): string {\r\n        return `${pos[0]},${pos[1]}`;\r\n    }\r\n    /**\r\n     * Creates a copy of the current gamestate.\r\n     * @returns object\r\n     */\r\n    createGameSnapshot(): Snapshot {\r\n        const snapshot = {\r\n            turn: this.turn,\r\n            whitePos: [...this.whitePos],\r\n            blackPos: [...this.blackPos],\r\n            board: this.board.map(row => row.map(cell => ({...cell})))\r\n        };\r\n        return snapshot;\r\n    }\r\n    /**\r\n     * executes a pawn move up without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    calculateMoveUp(pawnPosition: number[]): CalculateMoveHelperResult {\r\n        let movedUp = this.calculateMovePawn([pawnPosition[0] + 2, pawnPosition[1]]);\r\n        return {valid: movedUp.success, location: [pawnPosition[0] + 2, pawnPosition[1]]};\r\n    }\r\n    /**\r\n     * executes a pawn move left without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    calculateMoveLeft(pawnPosition: number[]): CalculateMoveHelperResult {\r\n        let movedLeft = this.calculateMovePawn([pawnPosition[0], pawnPosition[1] - 2]);\r\n        return  {valid: movedLeft.success, location: [pawnPosition[0], pawnPosition[1] - 2]};\r\n    }\r\n    /**\r\n     * executes a pawn move right without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    calculateMoveRight(pawnPosition: number[]): CalculateMoveHelperResult{\r\n        let movedRight = this.calculateMovePawn([pawnPosition[0], pawnPosition[1] + 2]);\r\n        return  {valid: movedRight.success, location: [pawnPosition[0], pawnPosition[1] + 2]};\r\n    }\r\n    /**\r\n     * executes a pawn move down without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    calculateMoveDown(pawnPosition: number[]): CalculateMoveHelperResult {\r\n        let movedDown = this.calculateMovePawn([pawnPosition[0] - 2, pawnPosition[1]]);\r\n        return  {valid: movedDown.success, location: [pawnPosition[0] - 2, pawnPosition[1]]};\r\n    }\r\n\r\n    /**\r\n     * executes a pawn move up without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    moveUp(pawnPosition: number[]): CalculateMoveHelperResult {\r\n        let snapshot = this.createGameSnapshot();\r\n        let movedUp = this.movePawn([pawnPosition[0] + 2, pawnPosition[1]]);\r\n        //reset gamestate\r\n        this.turn = snapshot.turn;\r\n        this.whitePos = snapshot.whitePos;\r\n        this.blackPos = snapshot.blackPos;\r\n        this.board = snapshot.board;\r\n        return {valid: movedUp.success, location: [pawnPosition[0] + 2, pawnPosition[1]]};\r\n    }\r\n    /**\r\n     * executes a pawn move left without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    moveLeft(pawnPosition: number[]): CalculateMoveHelperResult {\r\n        let snapshot = this.createGameSnapshot();\r\n        let movedLeft = this.movePawn([pawnPosition[0], pawnPosition[1] - 2]);\r\n        //reset gamestate\r\n        this.turn = snapshot.turn;\r\n        this.whitePos = snapshot.whitePos;\r\n        this.blackPos = snapshot.blackPos;\r\n        this.board = snapshot.board;\r\n        return  {valid: movedLeft.success, location: [pawnPosition[0], pawnPosition[1] - 2]};\r\n    }\r\n    /**\r\n     * executes a pawn move right without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    moveRight(pawnPosition: number[]): CalculateMoveHelperResult {\r\n        let snapshot = this.createGameSnapshot();\r\n        let movedRight = this.movePawn([pawnPosition[0], pawnPosition[1] + 2]);\r\n        //reset the gamestate\r\n        this.turn = snapshot.turn;\r\n        this.whitePos = snapshot.whitePos;\r\n        this.blackPos = snapshot.blackPos;\r\n        this.board = snapshot.board;\r\n        return  {valid: movedRight.success, location: [pawnPosition[0], pawnPosition[1] + 2]};\r\n    }\r\n    /**\r\n     * executes a pawn move down without changing the turn variable\r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @returns {object}\r\n     */\r\n    moveDown(pawnPosition: number[]): CalculateMoveHelperResult {\r\n        let snapshot = this.createGameSnapshot();\r\n        let movedDown = this.movePawn([pawnPosition[0] - 2, pawnPosition[1]]);\r\n        // reset the gamestate\r\n        this.turn = snapshot.turn;\r\n        this.whitePos = snapshot.whitePos;\r\n        this.blackPos = snapshot.blackPos;\r\n        this.board = snapshot.board;\r\n        return  {valid: movedDown.success, location: [pawnPosition[0] - 2, pawnPosition[1]]};\r\n    }\r\n    /**\r\n     * \r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @param {Set} visitedSquares set containing the visited squares\r\n     * @returns {array}\r\n     */\r\n    moveAllDirections(pawnPosition: number[], visitedSquares: Set<string>): CalculateMoveHelperResult[] {\r\n        visitedSquares.add(this.serialize(pawnPosition));\r\n        let up: CalculateMoveHelperResult = this.moveUp(pawnPosition);\r\n        let down: CalculateMoveHelperResult = this.moveDown(pawnPosition);\r\n        let right: CalculateMoveHelperResult = this.moveRight(pawnPosition);\r\n        let left: CalculateMoveHelperResult = this.moveLeft(pawnPosition);\r\n        let results: CalculateMoveHelperResult[] = [up, down, right, left];\r\n        return results;\r\n    }\r\n    /**\r\n     * \r\n     * @param {number[]} pawnPosition current pawn position\r\n     * @param {Set} visitedSquares set containing the visited squares\r\n     * @param {boolean} highlight true if not being used in pathFinder\r\n     * @returns {array}\r\n     */\r\n    calculateMoveAllDirections(pawnPosition: number[]): CalculateMoveHelperResult[] {\r\n        let up = this.calculateMoveUp(pawnPosition);\r\n        let down = this.calculateMoveDown(pawnPosition);\r\n        let right = this.calculateMoveRight(pawnPosition);\r\n        let left = this.calculateMoveLeft(pawnPosition);\r\n        let results: CalculateMoveHelperResult[] = [up, down, right, left];\r\n        return results;\r\n    }\r\n\r\n    generateAvailableSquares(pawnPosition: number[]): number[][]{\r\n        const squares: CalculateMoveHelperResult[] = this.calculateMoveAllDirections(pawnPosition);\r\n        let availableSquares: number[][] = [];\r\n        for(let a = 0; a < squares.length; a++){\r\n            if(squares[a].valid) availableSquares.push(squares[a].location);\r\n        }\r\n        return availableSquares;\r\n    }\r\n    /**\r\n     * Checks to see if there is a valid pathway to the opposing side of the board\r\n     * @param {number[]} pawnPosition coordinates of the current pawn position\r\n     * @returns boolean\r\n     */\r\n    pathFinder(pawnPosition: number[]): boolean {\r\n        let visitedSquares: Set<string> = new Set(); // THIS PROBABLY BREAKS THE FINDER\r\n        let queue: number[][] = [pawnPosition];\r\n\r\n        const isWinningRow = (pos: number[]): boolean => {\r\n            return this.turn === 'white' ? pos[0] === 16 : pos[0] === 0;\r\n        };\r\n        while (queue.length > 0){\r\n            let current = queue.shift();\r\n\r\n            if(!current) continue;\r\n            const key: string = this.serialize(current);\r\n\r\n            if(visitedSquares.has(key)) continue;\r\n            visitedSquares.add(key);\r\n\r\n            if(isWinningRow(current)) {\r\n                return true;\r\n            }\r\n\r\n            const results: CalculateMoveHelperResult[] = this.moveAllDirections(current, visitedSquares);\r\n            for(const result of results){\r\n                if(result.valid && !visitedSquares.has(this.serialize(result.location))) {\r\n                    queue.push(result.location);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * This function determines if, when a pawn is jumping over another pawn\r\n     * It will end up outside the boundary of the board\r\n     * @param {number} row starting row of the moving pawn\r\n     * @param {number} col starting column of the moving pawn\r\n     * @param {string} direction direction of travel\r\n     * @returns boolean true if pawn jump is out of bounds\r\n     */\r\n    hopsOffBoard (row: number, col: number, direction: string): boolean{\r\n        let currentPos =\r\n            this.turn === \"white\" ? this.whitePos : this.blackPos;\r\n        if (direction === \"up\") {\r\n            if (currentPos[0] > 12) return true;\r\n        }\r\n        if (direction === \"down\") {\r\n            if (currentPos[0] < 3) return true;\r\n        }\r\n        if (direction === \"left\") {\r\n            if (currentPos[1] < 4) return true;\r\n        }\r\n        if (direction === \"right\") {\r\n            if (currentPos[1] > 12) return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Determines if a pawn can legally jump over another pawn\r\n     * Calculates a new destination if jumping over a pawn.\r\n     * @param {number[]} currentPos\r\n     * @param {number[]} destPos\r\n     */\r\n    canJumpOverPawn (currentPos: number[], destPos: number[]): JumpResultFail | JumpResultSuccess {\r\n        let correctedDestination: number[] = [];\r\n        let direction: string = this.directionOfTravel(currentPos, destPos);\r\n        if (this.hopsOffBoard(currentPos[0], currentPos[1], direction)) {\r\n            return {\r\n                success: false,\r\n                canJump: false,\r\n                destination: undefined,\r\n                message: `not enough space in direction of travel`,\r\n            };\r\n        }\r\n        switch (direction) {\r\n            case \"up\":\r\n                if (this.checkForWall(currentPos[0] + 1, currentPos[1])) {\r\n                    return { success: false, canJump: false, destination: undefined, message: `Blocked by wall` };\r\n                }\r\n                if (this.checkForWall(currentPos[0] + 3, currentPos[1])) {\r\n                    return {\r\n                        success: false,\r\n                        canJump: false,\r\n                        destination: undefined,\r\n                        message: `Wall on opposite side of enemy pawn`,\r\n                    };\r\n                }\r\n                correctedDestination = [currentPos[0] + 4, currentPos[1]];\r\n                break;\r\n            case \"down\":\r\n                if (this.checkForWall(currentPos[0] - 1, currentPos[1])) {\r\n                    return { success: false, canJump: false, destination: undefined, message: `Blocked by wall` };\r\n                }\r\n                if (this.checkForWall(currentPos[0] - 3, currentPos[1])) {\r\n                    return {\r\n                        success: false,\r\n                        canJump: false,\r\n                        destination: undefined,\r\n                        message: `Wall on opposite side of enemy pawn`,\r\n                    };\r\n                }\r\n                correctedDestination = [currentPos[0] - 4, currentPos[1]];\r\n                break;\r\n            case \"left\":\r\n                if (this.checkForWall(currentPos[0], currentPos[1] - 1)) {\r\n                    return { success: false, canJump: false, destination: undefined, message: `Blocked by wall` };\r\n                }\r\n                if (this.checkForWall(currentPos[0], currentPos[1] - 3)) {\r\n                    return {\r\n                        success: false,\r\n                        canJump: false,\r\n                        destination: undefined,\r\n                        message: `Wall on opposite side of enemy pawn`,\r\n                    };\r\n                }\r\n                correctedDestination = [currentPos[0], currentPos[1] - 4];\r\n                break;\r\n            case \"right\":\r\n                if (this.checkForWall(currentPos[0], currentPos[1] + 1)) {\r\n                    return { success: false, canJump: false, destination: undefined, message: `Blocked by wall` };\r\n                }\r\n                if (this.checkForWall(currentPos[0], currentPos[1] + 3)) {\r\n                    return {\r\n                        success: false,\r\n                        canJump: false,\r\n                        destination: undefined,\r\n                        message: `Wall on opposite side of enemy pawn`,\r\n                    };\r\n                }\r\n                correctedDestination = [currentPos[0], currentPos[1] + 4];\r\n                break;\r\n        }\r\n        return { success: true, canJump: true, destination: correctedDestination };\r\n    };\r\n\r\n    /**\r\n     * Determines the direction of travel from current to destination.\r\n     * @param {number[]} currentPos\r\n     * @param {number[]} destPos\r\n     * @returns {string} One of 'up', 'down', 'left', or 'right'.\r\n     */\r\n    directionOfTravel(currentPos: number[], destPos: number[]): string {\r\n        let differenceRow = currentPos[0] - destPos[0];\r\n        let differenceCol = currentPos[1] - destPos[1];\r\n        if (differenceRow < 0) return \"up\";\r\n        if (differenceRow > 0) return \"down\";\r\n        if (differenceCol > 0) return \"left\";\r\n        if (differenceCol < 0) return \"right\";\r\n        return \"\";\r\n    };\r\n    \r\n    /**\r\n     * Inspects a specified cell in the grid for walls\r\n     * @param {number} row row to check for a wall\r\n     * @param {number} col column to check for a wall\r\n     * @returns boolean true if there is a wall there, false if not\r\n     */\r\n    checkForWall(row: number, col: number): boolean {\r\n        if (this.board[row][col].occupiedBy == \"wall\") return true;\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Executes a move with a supplied target cell\r\n     * @param {number[]} destination array containing the coordinates of the destination\r\n     * @returns object {boolean, string}\r\n     */\r\n    movePawn(destination: number[], finding: boolean = false): MoveResult  {\r\n        let moveResults: CalculateMovePawnResult = this.calculateMovePawn(destination);\r\n        const currentPosition = this.turn === 'white' ? this.whitePos : this.blackPos;\r\n        const jumpOverPawn = (destination: number[]) : MoveResult =>{\r\n                let jump: JumpResultFail | JumpResultSuccess = this.canJumpOverPawn(currentPosition, destination);\r\n                if(jump.success && jump.canJump){\r\n                    if(this.turn === \"white\"){\r\n                        const lastPlace = [...currentPosition];\r\n                        this.whitePos = jump.destination;\r\n                        this.board[lastPlace[0]][lastPlace[1]].occupiedBy = null;\r\n                        this.board[jump.destination[0]][\r\n                            jump.destination[1]\r\n                        ].occupiedBy = this.turn;\r\n                        return {success: true, message: `jump successful`};\r\n                    } else {\r\n                        const lastPlace = [...currentPosition];\r\n                        this.blackPos = jump.destination;\r\n                        this.board[lastPlace[0]][lastPlace[1]].occupiedBy = null;\r\n                        this.board[jump.destination[0]][\r\n                            jump.destination[1]\r\n                        ].occupiedBy = this.turn;\r\n                        return {success: true, message: `jump successful`};\r\n                    }\r\n                }\r\n                return {success: false, message: `could not complete jump`};\r\n        }\r\n        if(moveResults.success && moveResults.canJump){\r\n            jumpOverPawn(destination);\r\n            this.availableSquares = this.generateAvailableSquares(destination);\r\n            this.manageTurnMove();\r\n            console.log(`moved to ${destination} (FIRST BLOCK)`)\r\n            this.gameWon();\r\n            return {success: true, message: `jump successful`};\r\n        }\r\n        if(moveResults.success && !moveResults.canJump){\r\n            const lastPlace = [...currentPosition];\r\n            if(this.turn === \"white\"){\r\n                this.whitePos = destination;\r\n                this.board[lastPlace[0]][lastPlace[1]].occupiedBy = null;\r\n                this.board[destination[0]][destination[1]].occupiedBy = \"white\";\r\n                this.availableSquares = this.generateAvailableSquares(destination);\r\n                console.log(`moved to ${destination} (SECOND BLOCK)`)\r\n                this.manageTurnMove();\r\n                this.gameWon();\r\n                return {success: true, message: `jump successful`};\r\n            } else {\r\n                this.blackPos = destination;\r\n                this.board[lastPlace[0]][lastPlace[1]].occupiedBy = null;\r\n                this.board[destination[0]][destination[1]].occupiedBy = \"black\";\r\n                this.availableSquares = this.generateAvailableSquares(destination);\r\n                console.log(`moved to ${destination} (THIRD BLOCK)`)\r\n                this.manageTurnMove();\r\n                this.gameWon();\r\n                return {success: true, message: `jump successful`};\r\n            }\r\n        }\r\n        return {success: false, message: moveResults.message || \"could not complete move\"};\r\n    }\r\n\r\n    /**\r\n     * Does all the necessary move validation checks for a destination square\r\n     * @param {number[]} destination - The destination position as [row, col].\r\n     * @returns {Object} Result of the move attempt.\r\n     */\r\n    calculateMovePawn(destination: number[]): CalculateMovePawnResult {\r\n        let currentPos: number[] = this.turn === \"white\" ? this.whitePos : this.blackPos;\r\n        /**\r\n         * A helper, more refined way of using checkForWall by indicating a direction\r\n         * Looks in the direction of travel for a wall blocking its movement\r\n         * @param {number[]} currentPos - array of numbers indicating the pawns current position\r\n         * @param {string} direction - string indicating direction, one of 'up', 'down', 'left', 'right'.\r\n         * @returns\r\n         */\r\n        const noWallPresent = (currentPos: number[], direction: string):CalculateMovePawnResult => {\r\n            switch (direction) {\r\n                case \"up\":\r\n                    if (this.checkForWall(currentPos[0] + 1, currentPos[1])) {\r\n                        return { success: false, canJump: null, jumpDestination: undefined, message: `Blocked by wall` };\r\n                    }\r\n                    break;\r\n                case \"down\":\r\n                    if (this.checkForWall(currentPos[0] - 1, currentPos[1])) {\r\n                        return { success: false, canJump: null, jumpDestination: undefined, message: `Blocked by wall` };\r\n                    }\r\n                    break;\r\n                case \"left\":\r\n                    if (this.checkForWall(currentPos[0], currentPos[1] - 1)) {\r\n                        return { success: false, canJump: null, jumpDestination: undefined, message: `Blocked by wall` };\r\n                    }\r\n                    break;\r\n                case \"right\":\r\n                    if (this.checkForWall(currentPos[0], currentPos[1] + 1)) {\r\n                        return { success: false, canJump: null, jumpDestination: undefined, message: `Blocked by wall` };\r\n                    }\r\n                    break;\r\n            }\r\n            return {success: true, canJump: null, jumpDestination: undefined, message: `no wall present`};\r\n        };\r\n\r\n        if (!this.verifyRange(currentPos, destination)) {\r\n            return { success: false, canJump: false, jumpDestination: undefined, message: `Pawns can only move one space` };\r\n        }\r\n        if (this.isOutOfBounds(destination[0], destination[1])) {\r\n            return { success: false, canJump: false, jumpDestination: undefined, message: `Destination is out of bounds` };\r\n        }\r\n        if (this.isOccupied(destination[0], destination[1])) {\r\n            /*\r\n             * This block is handling the jumping logic\r\n             * Updating game state\r\n             */\r\n            let jump = this.canJumpOverPawn(currentPos, destination);\r\n            if (jump.success) {\r\n\r\n                    return {\r\n                        success: true,\r\n                        canJump: true,\r\n                        jumpDestination: jump.destination,\r\n                        message: `jump successful`,\r\n                    };\r\n\r\n                }\r\n                return { success: false, canJump: false, jumpDestination: undefined, message: `move failed` };\r\n            }\r\n    \r\n            const lastPlace = [...currentPos];\r\n            let isBlocked = noWallPresent(\r\n                currentPos,\r\n                this.directionOfTravel(currentPos, destination)\r\n            );\r\n            if (isBlocked.success === false) {\r\n                return { success: false, canJump: false, jumpDestination: undefined, message: `Blocked by wall` };\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                canJump: false,\r\n                jumpDestination: null,\r\n                message: `pawn can move`,\r\n            };\r\n        }\r\n    checkForImpedingWalls(targetLocation: number[], orientation: string | boolean): boolean | MoveResult | any {\r\n        /*\r\n            even row odd col = v\r\n            odd row even col = h\r\n            odd row odd col = intersection\r\n\r\n            +3 to row for v\r\n            +3 to col for h\r\n            make intersections occupied by wall\r\n        */\r\n        if(orientation === 'v'){\r\n            if(targetLocation[0] > 14 || targetLocation[0] < 0){\r\n                return {success: false, message: `wall outside of board`};\r\n            }\r\n            let baseSlot = this.checkForWall(targetLocation[0], targetLocation[1]);\r\n            let aboveOne = this.checkForWall(targetLocation[0] + 1, targetLocation[1]);\r\n            let aboveTwo = this.checkForWall(targetLocation[0] + 2, targetLocation[1]);\r\n            //let aboveThree = this.checkForWall(targetLocation[0] + 3, targetLocation[1]);\r\n            let slots = [baseSlot, aboveOne, aboveTwo];\r\n            for(let a = 0; a < slots.length; a++){\r\n                if(slots[a]) return true;\r\n            }\r\n            return false;\r\n        }\r\n        if(orientation === 'h'){\r\n            if(targetLocation[1] > 14 || targetLocation[1] < 0){\r\n                return {success: false, message: `wall outside of board`};\r\n            }\r\n            let baseSlot = this.checkForWall(targetLocation[0], targetLocation[1]);\r\n            let rightOne = this.checkForWall(targetLocation[0], targetLocation[1] + 1);\r\n            let rightTwo = this.checkForWall(targetLocation[0], targetLocation[1] + 2);\r\n            //let rightThree = this.checkForWall(targetLocation[0], targetLocation[1] + 3);\r\n            let slots = [baseSlot, rightOne, rightTwo];\r\n            for(let a = 0; a < slots.length; a++){\r\n                if(slots[a]) return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to place a wall at the specified board location.\r\n     * @param {number} row - The row index.\r\n     * @param {number} col - The column index.\r\n     * @returns {Object} Result of the wall placement attempt.\r\n     */\r\n    placeWall(row: number, col: number): MoveResult | any {\r\n        let orientation: string | boolean = this.determineWallOrientation(row, col);\r\n        if (\r\n            (this.turn === \"white\" && this.whiteWalls < 1) ||\r\n            (this.turn === \"black\" && this.blackWalls < 1)\r\n        ) {\r\n            return { success: false, message: \"Insufficient walls\" }; \r\n        }\r\n        if(this.checkForImpedingWalls([row, col], orientation)){\r\n            return {success: false, message: `obstruction`};\r\n        }\r\n\r\n        if (orientation === \"v\") {\r\n            this.board[row][col].occupiedBy = \"wall\";\r\n            this.board[row + 1][col].occupiedBy = \"wall\";\r\n            this.board[row + 2][col].occupiedBy = \"wall\";\r\n            this.manageTurnWalls();\r\n            return { success: true, message: `Vertical wall placed` };\r\n        }\r\n        if (orientation === \"h\") {\r\n            this.board[row][col].occupiedBy = \"wall\";\r\n            this.board[row][col + 1].occupiedBy = \"wall\";\r\n            this.board[row][col + 2].occupiedBy = \"wall\";\r\n            this.manageTurnWalls();\r\n            return { success: true, message: `Horizontal wall placed` };\r\n        }\r\n        if (orientation === false) {\r\n            return {\r\n                success: false,\r\n                message: `Cannot place wall in a space or intersection`,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n    TEST EXAMPLES FOR GAMESTATE GENERATION\r\n*/\r\n\r\n// function saveGameState(game, filename = 'gamestate.json') {\r\n//     const serialized = JSON.stringify(game, null, 2);\r\n//     fs.writeFileSync(filename, serialized, 'utf-8');\r\n// }\r\n\r\n\r\n// let game = new Game;\r\n// game.blackPos = [0,8];\r\n// game.board[16][8].occupiedBy = null;\r\n// game.board[0][8].occupiedBy = 'black';\r\n// game.board[0][2].occupiedBy = 'white';\r\n// game.turn = 'white';\r\n// console.log(game.gameWon());\r\n\r\n// console.log(game.availableSquares);\r\n// game.movePawn([2,8]);\r\n// console.log(game.availableSquares);\r\n// game.movePawn([14,8]);\r\n// console.log(game.availableSquares);\r\n\r\n// game.placeWall(7,6);\r\n// game.placeWall(7,10);\r\n//console.log(game.movePawn([2,8]));\r\n\r\n// saveGameState(game);\r\n\r\n//module.exports = Game;\r\n"]}